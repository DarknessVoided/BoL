-- { Nebelwolfi's Orb Walker

local orbTable = { lastAA = 0, windUp = 13.37, animation = 13.37 }
local orbDisabled = false
local doAA = true
local doMove = true
local myRange = 500
local AATable = {}
local Config = MenuConfig("NebelwolfisOrbWalker", "Nebelwolfis Orb Walker")

	Callback.Bind("Load", function()
	    _G.enemyHeroes 				   = {}
	    LoadEnemyHeroes()
	    _G.NebelwolfisOrbWalkerVersion = 0.35
	    _G.NebelwolfisOrbWalkerInit    = true
	    PreLoad()
	end)

	function LoadEnemyHeroes()
		if myHero then
		    for i = 0,Game.HeroCount() do
			  local hero = Game.Hero(i)
			  if hero.team ~= myHero.team then
			  	table.insert(enemyHeroes, hero)
			  end
			end
		else
			DelayAction(LoadEnemyHeroes, 1)
		end
	end

	local delayedActions, delayedActionsExecuter = {}, nil
	function DelayAction(func, delay, args) --delay in seconds
	    if not delayedActionsExecuter then
	        function delayedActionsExecuter()
	            for t, funcs in pairs(delayedActions) do
	                if t <= os.clock() then
	                    for _, f in ipairs(funcs) do if f.func then f.func(unpack(f.args or {})) end end
	                    delayedActions[t] = nil
	                end
	            end
	        end;Callback.Bind("Tick", delayedActionsExecuter)
	    end
	    local t = os.clock() + (delay or 0)
	    if delayedActions[t] then table.insert(delayedActions[t], { func = func, args = args })
	    else delayedActions[t] = { { func = func, args = args } }
	    end
	end

	function Set(list)
	    local set = {}
	    for _, l in ipairs(list) do 
	      set[l] = true 
	    end
	    return set
	end

	function PreLoad()
		if myHero then
			Load()
		else
			DelayAction(PreLoad, 1)
		end
	end

	function Load()
	    _G.NebelwolfisOrbWalkerLoaded = true
	    altAttacks = Set { "caitlynheadshotmissile", "frostarrow", "garenslash2", "kennenmegaproc", "lucianpassiveattack", "masteryidoublestrike", "quinnwenhanced", "renektonexecute", "renektonsuperexecute", "rengarnewpassivebuffdash", "trundleq", "xenzhaothrust", "xenzhaothrust2", "xenzhaothrust3" }
	    resetAttacks = Set { "dariusnoxiantacticsonh", "fioraflurry", "garenq", "hecarimrapidslash", "jaxempowertwo", "jaycehypercharge", "leonashieldofdaybreak", "luciane", "lucianq", "monkeykingdoubleattack", "mordekaisermaceofspades", "nasusq", "nautiluspiercinggaze", "netherblade", "parley", "poppydevastatingblow", "powerfist", "renektonpreexecute", "rengarq", "shyvanadoubleattack", "sivirw", "takedown", "talonnoxiandiplomacy", "trundletrollsmash", "vaynetumble", "vie", "volibearq", "xenzhaocombotarget", "yorickspectral", "reksaiq" }
	    MakeMenu()
	    Msg("Loaded")
	end

	function Msg(msg) 
		Game.Chat.Print("<font color=\"#6699ff\"><b>[Nebelwolfi's Orb Walker]:</b></font> <font color=\"#FFFFFF\">"..msg..".</font>") 
	end

	function MakeMenu()
		Config:Section("MenuHeader", "Nebelwolfis Orb Walker")
		Config:Menu("m", "Modes")
			Config.m:Section("MenuHeader", "Modes")
			Config.m:Menu("Combo", "Carry Mode")
				Config.m.Combo:Section("MenuHeader", "Carry Mode")
		        Config.m.Combo:Boolean("Attack", "Attack", true)
		        Config.m.Combo:Boolean("Move", "Move", true)
			Config.m:Menu("Harass", "Harass Mode")
				Config.m.Harass:Section("MenuHeader", "Harass Mode")
	        	Config.m.Harass:DropDown("Priority", "Priority", 1, {"LastHit", "Harass"})
		        Config.m.Harass:Boolean("Attack", "Attack", true)
		        Config.m.Harass:Boolean("Move", "Move", true)
			Config.m:Menu("LastHit", "LastHit Mode")
				Config.m.LastHit:Section("MenuHeader", "LastHit Mode")
		        Config.m.LastHit:Boolean("AttackE", "Attack Enemy on Lasthit (Anti-Farm)", true)
		        Config.m.LastHit:Boolean("Attack", "Attack", true)
		        Config.m.LastHit:Boolean("Move", "Move", true)
			Config.m:Menu("LaneClear", "LaneClear Mode")
				Config.m.LaneClear:Section("MenuHeader", "LaneClear Mode")
		        Config.m.LaneClear:Boolean("Attack", "Attack", true)
		        Config.m.LaneClear:Boolean("Move", "Move", true)
		Config:Menu("k", "Hotkeys")
			Config.k:Section("MenuHeader", "Hotkeys")
	        Config.k:KeyBinding("Combo", "Carry Mode", " ", false, false)
	        Config.k:KeyBinding("Harass", "Harass Mode", "C", false, false)
	        Config.k:KeyBinding("LastHit", "LastHit Mode", "X", false, false)
	        Config.k:KeyBinding("LaneClear", "LaneClear Mode", "V", false, false)
			Config.k:Section("MenuHeader", "Other Hotkeys")
	        Config.k:DropDown("Mouse", "Left-Click Action", 1, {"None", "Carry Mode", "Target Lock"})
	        Config.k:KeyBinding("TargetLock", "Target Lock", "G", false, false)
	        Config.k:KeyBinding("LaneFreeze", "Lane Freeze (F1)", "F1", false, false)
		Config:Menu("s", "Settings")
			Config.s:Section("MenuHeader", "Settings")
	    	Config.s:Boolean("Buildings", "Attack Selected Buildings", true)
	    	Config.s:Boolean("WindUpNoticeStart", "Show AA notice on GameStart", true)
	    	Config.s:Boolean("OverHeroStopMove", "Mouse over Hero to stop move", false)
		Config:Menu("i", "Items")
			Config.i:Menu("Combo", "Carry Mode")
				Config.i.Combo:Section("MenuHeader", "Carry Mode")
				Config.i.Combo:Boolean("BRK", "Blade of the Ruined King", true)
				Config.i.Combo:Boolean("BWC", "Bilgewater Cutlass", true)
				Config.i.Combo:Boolean("HXG", "Hextech Gunblade", true)
				Config.i.Combo:Boolean("HYDRA", "Ravenous Hydra", true)
				Config.i.Combo:Boolean("TIAMAT", "Tiamat", true)
				Config.i.Combo:Boolean("ENT", "Entropy", true)
				Config.i.Combo:Boolean("YGB", "Yomuu's Ghostblade", true)
	    	Config.i:Menu("Harass", "Harass Mode")
				Config.i.Harass:Section("MenuHeader", "Harass Mode")
				Config.i.Harass:Boolean("BRK", "Blade of the Ruined King", true)
				Config.i.Harass:Boolean("BWC", "Bilgewater Cutlass", true)
				Config.i.Harass:Boolean("HXG", "Hextech Gunblade", true)
				Config.i.Harass:Boolean("HYDRA", "Ravenous Hydra", true)
				Config.i.Harass:Boolean("TIAMAT", "Tiamat", true)
				Config.i.Harass:Boolean("ENT", "Entropy", true)
				Config.i.Harass:Boolean("YGB", "Yomuu's Ghostblade", true)
			Config.i:Menu("Farm", "Farm Modes")
				Config.i.Farm:Section("MenuHeader", "Farm Mode")
				Config.i.Farm:Boolean("BRK", "Blade of the Ruined King", true)
				Config.i.Farm:Boolean("BWC", "Bilgewater Cutlass", true)
				Config.i.Farm:Boolean("HXG", "Hextech Gunblade", true)
				Config.i.Farm:Boolean("HYDRA", "Ravenous Hydra", true)
				Config.i.Farm:Boolean("TIAMAT", "Tiamat", true)
				Config.i.Farm:Boolean("ENT", "Entropy", true)
				Config.i.Farm:Boolean("YGB", "Yomuu's Ghostblade", true)
				Config.i.Farm:Section("MenuHeader", "")
				Config.i.Farm:Boolean("tialast", "Use Tiamat/Hydra to Lasthit", true)
		Config:Menu("f", "Farm Settings")
			Config.f:Section("MenuHeader", "Farm Settings")
			Config.f:Menu("m", "Masteries")
				Config.f.m:Section("MenuHeader", "Masteries")
				Config.f.m:Boolean("Butcher", "Butcher", false)
				Config.f.m:Boolean("ArcaneBlade", "Arcane Blade", false)
				Config.f.m:Boolean("Havoc", "Havoc", false)
				Config.f.m:Boolean("DESword", "Double-Edged Sword", false)
				Config.f.m:DropDown("Executioner", "Executioner", 1, {"0", "1", "2", "3"})
		if myHero.range < 450 or myHero.charName == "Rengar" then
			Config:Menu("melee", "Melee Settings")
				Config.melee:Section("MenuHeader", "Melee Settings")
				Config.melee:Boolean("wtt", "Walk/Stick to target", true)
		end
		Config:Menu("d", "Draw Settings")
			Config.d:Section("MenuHeader", "Draw Settings")
			Config.d:Menu("md", "Minion Drawing")
				Config.d.md:Section("MenuHeader", "Minion Drawing")
				Config.d.md:Boolean("HPB", "Draw Cut HP Bars (LastHit Mode)", true)
				Config.d.md:Boolean("LHI", "Draw LastHit Indicator (LastHit Mode)", true)
				Config.d.md:Boolean("HPBa", "Always Draw Cut HP Bars", false)
				Config.d.md:Boolean("LHIa", "Always Draw LastHit Indicator", false)
			Config.d:Boolean("AAS", "Own AA Circle", true)
			Config.d:ColorPick("AASC", "Own AA Circle Color", Graphics.ARGB(0x7F, 0x00, 0xFF, 0x00))
			Config.d:Boolean("AAE", "Enemy AA Circles", true)
			Config.d:ColorPick("AAEC", "Enemy AA Circle Color", Graphics.ARGB(0x7F, 0xFF, 0x00, 0x00))
	end

	Callback.Bind("Draw", function()
		if not NebelwolfisOrbWalkerLoaded then return end
	    if (orbTable.windUp == 13.37 or orbTable.animation == 13.37) and Config.s.WindUpNoticeStart:Value() then
	      Graphics.DrawText("Please attack something with an unbuffed autoattack", 20, WINDOW_W/3, WINDOW_H/6, Graphics.ARGB(255,255,255,255))
	    end
	    if Config.d.AAS:Value() then
	      Graphics.DrawCircle(myHero.x, myHero.y, myHero.z, myRange, Config.d.AASC:Value())
	    end
	    if Config.d.AAE:Value() then
	      for _, enemy in pairs(enemyHeroes) do
	        if enemy.valid and not enemy.dead and enemy.visible then
	      		Graphics.DrawCircle(enemy.x, enemy.y, enemy.z, enemy.range+enemy.pos:DistanceTo(enemy.minBBox), Config.d.AAEC:Value())
	        end
	      end
	    end
	end)

	Callback.Bind("ProcessSpell", function(unit, spell)
		if not NebelwolfisOrbWalkerLoaded then return end
	    if unit and spell and spell.name then
		    if unit.type == myHero.type then
		      	if unit.isMe then
		        	if spell.name:lower():find("attack") or altAttacks[spell.name:lower()] then
		          		local windUp = spell.windUpTime
		          		orbTable.windUp = windUp
		          		orbTable.animation = spell.animationTime
		          		orbTable.lastAA = os.clock() + Game.Latency() / 2000
		        	end
		        	if resetAttacks[spell.name:lower()] then
		          		orbTable.lastAA = os.clock() - Game.Latency() / 2000 - orbTable.animation
		        	end
		    	elseif unit.team ~= myHero.team then
		    		if unit.valid and myHero.pos:DistanceTo(unit.pos) < myRange and TimeToAttack() and (spell.name:lower():find("attack") or altAttacks[spell.name:lower()]) and spell.target.type ~= myHero.type and Config.m.LastHit.AttackE:Value() and Config.k.LastHit:Value() and spell.target.health <= GetDmg(unit, spell.target) then
		        		myHero:Attack(unit)
		        	end
		    	end
		    end
		    if spell.target and spell.target.type == "obj_AI_Minion" and spell.name:lower():find("attack") then
		    	local speed = GetProjectileSpeed(unit)
		    	if speed < math.huge then
			    	local timer = unit.pos:DistanceTo(spell.target.pos)/speed
			    	local target = spell.target
			    	if not AATable[target.networkID] then AATable[target.networkID] = {} end
			    	AATable[target.networkID][timer] = {source = unit, dmg = unit:CalcDamage(spell.target, unit.totalDamage), time = os.clock() + timer}
			    	DelayAction(function() AATable[target.networkID][timer] = nil end, timer)
			    end
		    end
	    end
	end) 

	-- from vpred start
	local projectilespeeds = {["Velkoz"]= 2000,["TeemoMushroom"] = math.huge,["TestCubeRender"] = math.huge ,["Xerath"] = 2000.0000 ,["Kassadin"] = math.huge ,["Rengar"] = math.huge ,["Thresh"] = 1000.0000 ,["Ziggs"] = 1500.0000 ,["ZyraPassive"] = 1500.0000 ,["ZyraThornPlant"] = 1500.0000 ,["KogMaw"] = 1800.0000 ,["HeimerTBlue"] = 1599.3999 ,["EliseSpider"] = 500.0000 ,["Skarner"] = 500.0000 ,["ChaosNexus"] = 500.0000 ,["Katarina"] = 467.0000 ,["Riven"] = 347.79999 ,["SightWard"] = 347.79999 ,["HeimerTYellow"] = 1599.3999 ,["Ashe"] = 2000.0000 ,["VisionWard"] = 2000.0000 ,["TT_NGolem2"] = math.huge ,["ThreshLantern"] = math.huge ,["TT_Spiderboss"] = math.huge ,["OrderNexus"] = math.huge ,["Soraka"] = 1000.0000 ,["Jinx"] = 2750.0000 ,["TestCubeRenderwCollision"] = 2750.0000 ,["Red_Minion_Wizard"] = 650.0000 ,["JarvanIV"] = 20.0000 ,["Blue_Minion_Wizard"] = 650.0000 ,["TT_ChaosTurret2"] = 1200.0000 ,["TT_ChaosTurret3"] = 1200.0000 ,["TT_ChaosTurret1"] = 1200.0000 ,["ChaosTurretGiant"] = 1200.0000 ,["Dragon"] = 1200.0000 ,["LuluSnowman"] = 1200.0000 ,["Worm"] = 1200.0000 ,["ChaosTurretWorm"] = 1200.0000 ,["TT_ChaosInhibitor"] = 1200.0000 ,["ChaosTurretNormal"] = 1200.0000 ,["AncientGolem"] = 500.0000 ,["ZyraGraspingPlant"] = 500.0000 ,["HA_AP_OrderTurret3"] = 1200.0000 ,["HA_AP_OrderTurret2"] = 1200.0000 ,["Tryndamere"] = 347.79999 ,["OrderTurretNormal2"] = 1200.0000 ,["Singed"] = 700.0000 ,["OrderInhibitor"] = 700.0000 ,["Diana"] = 347.79999 ,["HA_FB_HealthRelic"] = 347.79999 ,["TT_OrderInhibitor"] = 347.79999 ,["GreatWraith"] = 750.0000 ,["Yasuo"] = 347.79999 ,["OrderTurretDragon"] = 1200.0000 ,["OrderTurretNormal"] = 1200.0000 ,["LizardElder"] = 500.0000 ,["HA_AP_ChaosTurret"] = 1200.0000 ,["Ahri"] = 1750.0000 ,["Lulu"] = 1450.0000 ,["ChaosInhibitor"] = 1450.0000 ,["HA_AP_ChaosTurret3"] = 1200.0000 ,["HA_AP_ChaosTurret2"] = 1200.0000 ,["ChaosTurretWorm2"] = 1200.0000 ,["TT_OrderTurret1"] = 1200.0000 ,["TT_OrderTurret2"] = 1200.0000 ,["TT_OrderTurret3"] = 1200.0000 ,["LuluFaerie"] = 1200.0000 ,["HA_AP_OrderTurret"] = 1200.0000 ,["OrderTurretAngel"] = 1200.0000 ,["YellowTrinketUpgrade"] = 1200.0000 ,["MasterYi"] = math.huge ,["Lissandra"] = 2000.0000 ,["ARAMOrderTurretNexus"] = 1200.0000 ,["Draven"] = 1700.0000 ,["FiddleSticks"] = 1750.0000 ,["SmallGolem"] = math.huge ,["ARAMOrderTurretFront"] = 1200.0000 ,["ChaosTurretTutorial"] = 1200.0000 ,["NasusUlt"] = 1200.0000 ,["Maokai"] = math.huge ,["Wraith"] = 750.0000 ,["Wolf"] = math.huge ,["Sivir"] = 1750.0000 ,["Corki"] = 2000.0000 ,["Janna"] = 1200.0000 ,["Nasus"] = math.huge ,["Golem"] = math.huge ,["ARAMChaosTurretFront"] = 1200.0000 ,["ARAMOrderTurretInhib"] = 1200.0000 ,["LeeSin"] = math.huge ,["HA_AP_ChaosTurretTutorial"] = 1200.0000 ,["GiantWolf"] = math.huge ,["HA_AP_OrderTurretTutorial"] = 1200.0000 ,["YoungLizard"] = 750.0000 ,["Jax"] = 400.0000 ,["LesserWraith"] = math.huge ,["Blitzcrank"] = math.huge ,["ARAMChaosTurretInhib"] = 1200.0000 ,["Shen"] = 400.0000 ,["Nocturne"] = math.huge ,["Sona"] = 1500.0000 ,["ARAMChaosTurretNexus"] = 1200.0000 ,["YellowTrinket"] = 1200.0000 ,["OrderTurretTutorial"] = 1200.0000 ,["Caitlyn"] = 2500.0000 ,["Trundle"] = 347.79999 ,["Malphite"] = 1000.0000 ,["Mordekaiser"] = math.huge ,["ZyraSeed"] = math.huge ,["Vi"] = 1000.0000 ,["Tutorial_Red_Minion_Wizard"] = 650.0000 ,["Renekton"] = math.huge ,["Anivia"] = 1400.0000 ,["Fizz"] = math.huge ,["Heimerdinger"] = 1500.0000 ,["Evelynn"] = 467.0000 ,["Rumble"] = 347.79999 ,["Leblanc"] = 1700.0000 ,["Darius"] = math.huge ,["OlafAxe"] = math.huge ,["Viktor"] = 2300.0000 ,["XinZhao"] = 20.0000 ,["Orianna"] = 1450.0000 ,["Vladimir"] = 1400.0000 ,["Nidalee"] = 1750.0000 ,["Tutorial_Red_Minion_Basic"] = math.huge ,["ZedShadow"] = 467.0000 ,["Syndra"] = 1800.0000 ,["Zac"] = 1000.0000 ,["Olaf"] = 347.79999 ,["Veigar"] = 1100.0000 ,["Twitch"] = 2500.0000 ,["Alistar"] = math.huge ,["Akali"] = 467.0000 ,["Urgot"] = 1300.0000 ,["Leona"] = 347.79999 ,["Talon"] = math.huge ,["Karma"] = 1500.0000 ,["Jayce"] = 347.79999 ,["Galio"] = 1000.0000 ,["Shaco"] = math.huge ,["Taric"] = math.huge ,["TwistedFate"] = 1500.0000 ,["Varus"] = 2000.0000 ,["Garen"] = 347.79999 ,["Swain"] = 1600.0000 ,["Vayne"] = 2000.0000 ,["Fiora"] = 467.0000 ,["Quinn"] = 2000.0000 ,["Kayle"] = math.huge ,["Blue_Minion_Basic"] = math.huge ,["Brand"] = 2000.0000 ,["Teemo"] = 1300.0000 ,["Amumu"] = 500.0000 ,["Annie"] = 1200.0000 ,["Odin_Blue_Minion_caster"] = 1200.0000 ,["Elise"] = 1600.0000 ,["Nami"] = 1500.0000 ,["Poppy"] = 500.0000 ,["AniviaEgg"] = 500.0000 ,["Tristana"] = 2250.0000 ,["Graves"] = 3000.0000 ,["Morgana"] = 1600.0000 ,["Gragas"] = math.huge ,["MissFortune"] = 2000.0000 ,["Warwick"] = math.huge ,["Cassiopeia"] = 1200.0000 ,["Tutorial_Blue_Minion_Wizard"] = 650.0000 ,["DrMundo"] = math.huge ,["Volibear"] = 467.0000 ,["Irelia"] = 467.0000 ,["Odin_Red_Minion_Caster"] = 650.0000 ,["Lucian"] = 2800.0000 ,["Yorick"] = math.huge ,["RammusPB"] = math.huge ,["Red_Minion_Basic"] = math.huge ,["Udyr"] = 467.0000 ,["MonkeyKing"] = 20.0000 ,["Tutorial_Blue_Minion_Basic"] = math.huge ,["Kennen"] = 1600.0000 ,["Nunu"] = 500.0000 ,["Ryze"] = 2400.0000 ,["Zed"] = 467.0000 ,["Nautilus"] = 1000.0000 ,["Gangplank"] = 1000.0000 ,["Lux"] = 1600.0000 ,["Sejuani"] = 500.0000 ,["Ezreal"] = 2000.0000 ,["OdinNeutralGuardian"] = 1800.0000 ,["Khazix"] = 500.0000 ,["Sion"] = math.huge ,["Aatrox"] = 347.79999 ,["Hecarim"] = 500.0000 ,["Pantheon"] = 20.0000 ,["Shyvana"] = 467.0000 ,["Zyra"] = 1700.0000 ,["Karthus"] = 1200.0000 ,["Rammus"] = math.huge ,["Zilean"] = 1200.0000 ,["Chogath"] = 500.0000 ,["Malzahar"] = 2000.0000 ,["YorickRavenousGhoul"] = 347.79999 ,["YorickSpectralGhoul"] = 347.79999 ,["JinxMine"] = 347.79999 ,["YorickDecayedGhoul"] = 347.79999 ,["XerathArcaneBarrageLauncher"] = 347.79999 ,["Odin_SOG_Order_Crystal"] = 347.79999 ,["TestCube"] = 347.79999 ,["ShyvanaDragon"] = math.huge ,["FizzBait"] = math.huge ,["Blue_Minion_MechMelee"] = math.huge ,["OdinQuestBuff"] = math.huge ,["TT_Buffplat_L"] = math.huge ,["TT_Buffplat_R"] = math.huge ,["KogMawDead"] = math.huge ,["TempMovableChar"] = math.huge ,["Lizard"] = 500.0000 ,["GolemOdin"] = math.huge ,["OdinOpeningBarrier"] = math.huge ,["TT_ChaosTurret4"] = 500.0000 ,["TT_Flytrap_A"] = 500.0000 ,["TT_NWolf"] = math.huge ,["OdinShieldRelic"] = math.huge ,["LuluSquill"] = math.huge ,["redDragon"] = math.huge ,["MonkeyKingClone"] = math.huge ,["Odin_skeleton"] = math.huge ,["OdinChaosTurretShrine"] = 500.0000 ,["Cassiopeia_Death"] = 500.0000 ,["OdinCenterRelic"] = 500.0000 ,["OdinRedSuperminion"] = math.huge ,["JarvanIVWall"] = math.huge ,["ARAMOrderNexus"] = math.huge ,["Red_Minion_MechCannon"] = 1200.0000 ,["OdinBlueSuperminion"] = math.huge ,["SyndraOrbs"] = math.huge ,["LuluKitty"] = math.huge ,["SwainNoBird"] = math.huge ,["LuluLadybug"] = math.huge ,["CaitlynTrap"] = math.huge ,["TT_Shroom_A"] = math.huge ,["ARAMChaosTurretShrine"] = 500.0000 ,["Odin_Windmill_Propellers"] = 500.0000 ,["TT_NWolf2"] = math.huge ,["OdinMinionGraveyardPortal"] = math.huge ,["SwainBeam"] = math.huge ,["Summoner_Rider_Order"] = math.huge ,["TT_Relic"] = math.huge ,["odin_lifts_crystal"] = math.huge ,["OdinOrderTurretShrine"] = 500.0000 ,["SpellBook1"] = 500.0000 ,["Blue_Minion_MechCannon"] = 1200.0000 ,["TT_ChaosInhibitor_D"] = 1200.0000 ,["Odin_SoG_Chaos"] = 1200.0000 ,["TrundleWall"] = 1200.0000 ,["HA_AP_HealthRelic"] = 1200.0000 ,["OrderTurretShrine"] = 500.0000 ,["OriannaBall"] = 500.0000 ,["ChaosTurretShrine"] = 500.0000 ,["LuluCupcake"] = 500.0000 ,["HA_AP_ChaosTurretShrine"] = 500.0000 ,["TT_NWraith2"] = 750.0000 ,["TT_Tree_A"] = 750.0000 ,["SummonerBeacon"] = 750.0000 ,["Odin_Drill"] = 750.0000 ,["TT_NGolem"] = math.huge ,["AramSpeedShrine"] = math.huge ,["OriannaNoBall"] = math.huge ,["Odin_Minecart"] = math.huge ,["Summoner_Rider_Chaos"] = math.huge ,["OdinSpeedShrine"] = math.huge ,["TT_SpeedShrine"] = math.huge ,["odin_lifts_buckets"] = math.huge ,["OdinRockSaw"] = math.huge ,["OdinMinionSpawnPortal"] = math.huge ,["SyndraSphere"] = math.huge ,["Red_Minion_MechMelee"] = math.huge ,["SwainRaven"] = math.huge ,["crystal_platform"] = math.huge ,["MaokaiSproutling"] = math.huge ,["Urf"] = math.huge ,["TestCubeRender10Vision"] = math.huge ,["MalzaharVoidling"] = 500.0000 ,["GhostWard"] = 500.0000 ,["MonkeyKingFlying"] = 500.0000 ,["LuluPig"] = 500.0000 ,["AniviaIceBlock"] = 500.0000 ,["TT_OrderInhibitor_D"] = 500.0000 ,["Odin_SoG_Order"] = 500.0000 ,["RammusDBC"] = 500.0000 ,["FizzShark"] = 500.0000 ,["LuluDragon"] = 500.0000 ,["OdinTestCubeRender"] = 500.0000 ,["TT_Tree1"] = 500.0000 ,["ARAMOrderTurretShrine"] = 500.0000 ,["Odin_Windmill_Gears"] = 500.0000 ,["ARAMChaosNexus"] = 500.0000 ,["TT_NWraith"] = 750.0000 ,["TT_OrderTurret4"] = 500.0000 ,["Odin_SOG_Chaos_Crystal"] = 500.0000 ,["OdinQuestIndicator"] = 500.0000 ,["JarvanIVStandard"] = 500.0000 ,["TT_DummyPusher"] = 500.0000 ,["OdinClaw"] = 500.0000 ,["EliseSpiderling"] = 2000.0000 ,["QuinnValor"] = math.huge ,["UdyrTigerUlt"] = math.huge ,["UdyrTurtleUlt"] = math.huge ,["UdyrUlt"] = math.huge ,["UdyrPhoenixUlt"] = math.huge ,["ShacoBox"] = 1500.0000 ,["HA_AP_Poro"] = 1500.0000 ,["AnnieTibbers"] = math.huge ,["UdyrPhoenix"] = math.huge ,["UdyrTurtle"] = math.huge ,["UdyrTiger"] = math.huge ,["HA_AP_OrderShrineTurret"] = 500.0000 ,["HA_AP_Chains_Long"] = 500.0000 ,["HA_AP_BridgeLaneStatue"] = 500.0000 ,["HA_AP_ChaosTurretRubble"] = 500.0000 ,["HA_AP_PoroSpawner"] = 500.0000 ,["HA_AP_Cutaway"] = 500.0000 ,["HA_AP_Chains"] = 500.0000 ,["ChaosInhibitor_D"] = 500.0000 ,["ZacRebirthBloblet"] = 500.0000 ,["OrderInhibitor_D"] = 500.0000 ,["Nidalee_Spear"] = 500.0000 ,["Nidalee_Cougar"] = 500.0000 ,["TT_Buffplat_Chain"] = 500.0000 ,["WriggleLantern"] = 500.0000 ,["TwistedLizardElder"] = 500.0000 ,["RabidWolf"] = math.huge ,["HeimerTGreen"] = 1599.3999 ,["HeimerTRed"] = 1599.3999 ,["ViktorFF"] = 1599.3999 ,["TwistedGolem"] = math.huge ,["TwistedSmallWolf"] = math.huge ,["TwistedGiantWolf"] = math.huge ,["TwistedTinyWraith"] = 750.0000 ,["TwistedBlueWraith"] = 750.0000 ,["TwistedYoungLizard"] = 750.0000 ,["Red_Minion_Melee"] = math.huge ,["Blue_Minion_Melee"] = math.huge ,["Blue_Minion_Healer"] = 1000.0000 ,["Ghast"] = 750.0000 ,["blueDragon"] = 800.0000 ,["Red_Minion_MechRange"] = 3000, ["SRU_OrderMinionRanged"] = 650, ["SRU_ChaosMinionRanged"] = 650, ["SRU_OrderMinionSiege"] = 1200, ["SRU_ChaosMinionSiege"] = 1200, ["SRUAP_Turret_Chaos1"]  = 1200, ["SRUAP_Turret_Chaos2"]  = 1200, ["SRUAP_Turret_Chaos3"] = 1200, ["SRUAP_Turret_Order1"]  = 1200, ["SRUAP_Turret_Order2"]  = 1200, ["SRUAP_Turret_Order3"] = 1200, ["SRUAP_Turret_Chaos4"] = 1200, ["SRUAP_Turret_Chaos5"] = 500, ["SRUAP_Turret_Order4"] = 1200, ["SRUAP_Turret_Order5"] = 500 } 
	function GetProjectileSpeed(unit)
		return projectilespeeds[unit.charName] and projectilespeeds[unit.charName] or math.huge
	end
	-- from vpred end

	function PredictHealth(unit, time)
		if AATable[unit.networkID] then
			local preds = AATable[unit.networkID]
			local health = unit.health
			if preds then
				for _, k in pairs(preds) do
					if not k.source.dead and k.time < os.clock() + time then
						health = health - k.dmg
					end
				end
			end
			return health
		else
			return unit.health
		end
	end

	Callback.Bind("Tick", function()
		if not NebelwolfisOrbWalkerLoaded then return end
		myRange = myHero.range+myHero.pos:DistanceTo(myHero.minBBox)
		if DoOrb() then
			Target = AcquireTarget()
			Orb(Target)
		end
	end)

	function Orb(unit)
	    if TimeToAttack() and unit and unit.valid and not unit.dead and myHero.pos:DistanceTo(unit.pos) < myRange then
	      Attack(unit)
	    elseif TimeToMove() then
	      local pos = nil
	      if melee and Config.melee.wtt:Value() and unit and unit.type == myHero.type then
	        if GetDistance(unit) > GetDistance(myHero.minBBox) + GetDistance(unit.minBBox) then
	          pos = unit.pos
	        end
	      else
	        pos = mousePos
	      end
	      Move(fPos or pos)
	    end
	end

	function Attack(unit)
		if not DoAA() or not unit.valid then return end
		myHero:Attack(unit)
	end

	function Move(pos)
		if not DoMove() or not pos then return end
		if Config.s.OverHeroStopMove then
			local movePos = Geometry.Vector3(myHero.pos) + (Geometry.Vector3(pos) - Geometry.Vector3(myHero.pos)):Normalize() * myHero.boundingRadius * 2
			if myHero.pos:DistanceTo(pos) > myHero.boundingRadius then
				myHero:Move(movePos.x, movePos.z)
			end
		else
			local movePos = Geometry.Vector3(myHero.pos) + (Geometry.Vector3(pos) - Geometry.Vector3(myHero.pos)):Normalize() * 250
			myHero:Move(movePos.x, movePos.z)
		end
	end

	function DoOrb()
    	return Config.k.Combo:Value() or (Keyboard.IsKeyDown(1) and Config.k.Mouse == 2) or Config.k.Harass:Value() or Config.k.LastHit:Value() or Config.k.LaneClear:Value()
	end

	function DoAA()
    	return doAA and ((Config.k.Combo:Value() or (Keyboard.IsKeyDown(1) and Config.k.Mouse == 2)) and Config.m.Combo.Attack:Value()) or (Config.k.Harass:Value() and Config.m.Harass.Attack:Value()) or (Config.k.LastHit:Value() and Config.m.LastHit.Attack:Value()) or (Config.k.LaneClear:Value() and Config.m.LaneClear.Attack:Value())
	end

	function DoMove()
    	return doMove and ((Config.k.Combo:Value() or (Keyboard.IsKeyDown(1) and Config.k.Mouse == 2)) and Config.m.Combo.Move:Value()) or (Config.k.Harass:Value() and Config.m.Harass.Move:Value()) or (Config.k.LastHit:Value() and Config.m.LastHit.Move:Value()) or (Config.k.LaneClear:Value() and Config.m.LaneClear.Move:Value())
	end

	function TimeToAttack()
		return os.clock() - Game.Latency() / 2000 > orbTable.lastAA + orbTable.animation and DoAA()
	end

	function TimeToMove()
		return os.clock() - Game.Latency() / 2000 > orbTable.lastAA + orbTable.windUp and DoMove()
	end

	function AcquireTarget()
		local target = nil
		local t1 = minionManager.GetHighestMinion(myHero.pos, myRange, 300-myHero.team)
		local t2 = minionManager.GetLowestMinion(myHero.pos, myRange, 300-myHero.team)
		if Config.k.Combo:Value() then
			target = GetTarget(myRange)
		elseif Config.k.Harass:Value() then
			if Config.m.Harass.Priority:Value() == 1 then
				if t2 and t2.valid and t2.pos:DistanceTo(myHero.pos) < myRange and PredictHealth(t2, orbTable.windUp + t2.pos:DistanceTo(myHero.pos)/GetProjectileSpeed(myHero) - 0.07) < myHero:CalcDamage(t2, myHero.totalDamage) then
					target = t2
				else
					target = GetTarget(myRange)
				end
			else
				target = GetTarget(myRange)
				if not target then
					if t2 and t2.valid and t2.pos:DistanceTo(myHero.pos) < myRange and PredictHealth(t2, orbTable.windUp + t2.pos:DistanceTo(myHero.pos)/GetProjectileSpeed(myHero) - 0.07) < myHero:CalcDamage(t2, myHero.totalDamage) then
						target = t2
					end
				end
			end
		elseif Config.k.LastHit:Value() then
			if t2 and t2.valid and t2.pos:DistanceTo(myHero.pos) < myRange and PredictHealth(t2, orbTable.windUp + t2.pos:DistanceTo(myHero.pos)/GetProjectileSpeed(myHero) - 0.07) < myHero:CalcDamage(t2, myHero.totalDamage) then
				target = t2
			end
		elseif Config.k.LaneClear:Value() then
			if t1 and t1.valid and t1.pos:DistanceTo(myHero.pos) < myRange then
				if t2 and t2.valid and t2.pos:DistanceTo(myHero.pos) < myRange and t2.health < myHero:CalcDamage(t2, myHero.totalDamage) then
					target = t2
				else
					target = t1
				end
			end
		end
		return target
	end

	function GetTarget(range)
	    local target, steps = nil, 10000
	    for _, k in pairs(enemyHeroes) do
	        local step = k.health / myHero:CalcDamage(k, 100)
	        if k and k.valid and k.pos:DistanceTo(myHero.pos) < range and step < steps then
	            target = k
	            steps = step
	        end
	    end
	    return target
	end

	function PrepareToMakeMinionManager()
		if myHero then
			MakeMinionManager()
		else
			DelayAction(PrepareMakeMinionManager, 1)
		end
	end

	function MakeMinionManager()
		_G.MINION_ALL, _G.MINION_ENEMY, _G.MINION_ALLY, _G.MINION_JUNGLE = 0, 300-myHero.team, myHero.team, 300
		local manager = {}
		manager.objects = {}
		for i = 0,Game.ObjectCount() do
			local obj = Game.Object(i)
			if obj and obj.valid and obj.type == "obj_AI_Minion" then
				manager.objects[obj.networkID] = obj
			end
		end
		manager.maxObjects = function(team)
							    local m = 0
							    for _,k in pairs(manager.objects) do 
							    	if k and k.valid and not k.dead then
								    	if team then
								    		if (team == 0 or k.team == team) then
								    			m = m + 1
								    		end
								    	else
								        	m = m + 1 
								        end
							    	else
							    		manager.objects[_] = nil
								    end
							    end
							    return m
							end
		manager.GetAllMinions = function()
							    local m = {}
							    for _,k in pairs(manager.objects) do 
							    	if k and k.valid and not k.dead then
							    		table.insert(m, k)
							    	else
							    		manager.objects[_] = nil
							        end
							    end
							    return m
							end
		manager.GetMinions = function(team, pos, range)
							    local m = {}
							    for _,k in pairs(manager.GetAllMinions()) do 
							    	if team then
							    		if pos and range then
							    			if (team == 0 or k.team == team) and k.pos:DistanceTo(pos) < range then
									    		table.insert(m, k)
									    	end
							    		elseif (team == 0 or k.team == team) then
							    			table.insert(m, k)
							    		end
							    	else
							    		table.insert(m, k)
							    	end
							    end
							    return m
							end
		manager.ClosestMinion = function(pos, team)
								    local minion = nil
								    for k,v in pairs(manager.GetAllMinions()) do 
								        if not minion and v and v.valid and not v.dead and (team == 0 or v.team == team) then minion = v end
								        if minion and v and v.valid and not v.dead and (team == 0 or v.team == team) and minion.pos:DistanceTo(pos) > v.pos:DistanceTo(pos) then
								            minion = v
								        end
								    end
								    return minion
								end
		manager.GetHighestMinion = function(pos, range, team)
								    local minion = nil
								    for k,v in pairs(manager.GetAllMinions()) do 
								        if not minion and v and (team == 0 or v.team == team) and v.pos:DistanceTo(pos) < range then minion = v end
								        if minion and v and (team == 0 or v.team == team) and v.pos:DistanceTo(pos) < range and v.health > minion.health then
								            minion = v
								        end
								    end
								    return minion
								end
		manager.GetLowestMinion = function(pos, range, team)
								    local minion = nil
								    for k,v in pairs(manager.GetAllMinions()) do 
								        if not minion and v and (team == 0 or v.team == team) and v.pos:DistanceTo(pos) < range then minion = v end
								        if minion and v and (team == 0 or v.team == team) and v.pos:DistanceTo(pos) < range and v.health < minion.health then
								            minion = v
								        end
								    end
								    return minion
								end
		_G.minionManager = manager
		Callback.Bind("CreateObj", function(obj)
			if obj and obj.type == "obj_AI_Minion" then
				table.insert(minionManager.objects, obj)
			end
		end)
	end;PrepareToMakeMinionManager()
-- }
